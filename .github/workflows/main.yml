name: CI-Weather-Forecast-Bot
on:
  push:
    branches:
    - main
    paths:
    - 'src/**'

  workflow_dispatch:

jobs:
    # Пока только проверка линтером. TODO: Добавить тесты
    tests:
      runs-on: ubuntu-latest
      steps:
        - name: Check out the repo for "tests"
          uses: actions/checkout@v3

        - name: Install uv
          uses: astral-sh/setup-uv@v5
          with:
            version: "0.7.12"

        - name: Set up Python
          uses: actions/setup-python@v5
          with:
            python-version-file: ".python-version"

        - name: Install flake8 and isort
          run: |
            uv add flake8 isort

        - name: Run flake8
          run: |
            uv run flake8 ./src

        - name: Run isort
          run: |
            uv run isort ./src --check --diff

    build_and_push_to_dockerhub:
      runs-on: ubuntu-latest
      needs: tests
      steps:
        - name: Check out the repo for build
          uses: actions/checkout@v3

        - name: Install uv
          uses: astral-sh/setup-uv@v5
          with:
            version: "0.7.12"

        - name: Set up Python
          uses: actions/setup-python@v5
          with:
            python-version-file: ".python-version"

        - name: Install dependencies and flake8, isort
          run: |
            uv sync --locked --all-extras --dev

        - name: Install Docker Buildx
          uses: docker/setup-buildx-action@v2

        - name: Login to DockerHub
          uses: docker/login-action@v2
          with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_PASSWORD}}

        - name: Build and push
          uses: docker/build-push-action@v4
          with:
            context: .
            push: true
            tags: ${{ secrets.DOCKERHUB_USERNAME }}/weather-forecast-bot:latest

    deploy_to_remote_server:
      runs-on: ubuntu-latest
      needs:
        - tests
        - build_and_push_to_dockerhub
      steps:
        - name: Check out the repo for deploy
          uses: actions/checkout@v3

        - name: Create .env file and fill it with secrets
          uses: appleboy/ssh-action@master
          with:
            host: ${{ secrets.HOST }}
            username: ${{ secrets.USER }}
            key: ${{ secrets.SSH_KEY }}
            passphrase: ${{ secrets.SSH_PASSPHRASE }}
            script: |
              cd weather-forecast-bot || mkdir weather-forecast-bot && cd weather-forecast-bot
              echo "TELEGRAM_TOKEN=${{ secrets.TELEGRAM_TOKEN }}" > .env
              echo "GISMETEO_TOKEN=${{ secrets.GISMETEO_TOKEN }}" >> .env

        - name: Copy docker-compose.yml to remote server
          uses: appleboy/scp-action@master
          with:
            host: ${{ secrets.HOST }}
            username: ${{ secrets.USER }}
            key: ${{ secrets.SSH_KEY }}
            passphrase: ${{ secrets.SSH_PASSPHRASE }}
            source: "./docker-compose.production.yml"
            target: "weather-forecast-bot"

        - name: Execut commands on remote server to deploy
          uses: appleboy/ssh-action@master
          with:
            host: ${{ secrets.HOST }}
            username: ${{ secrets.USER }}
            key: ${{ secrets.SSH_KEY }}
            passphrase: ${{ secrets.SSH_PASSPHRASE }}
            script: |
              cd weather-forecast-bot
              docker compose pull
              docker compose down
              docker compose up -d
          shell: bash
